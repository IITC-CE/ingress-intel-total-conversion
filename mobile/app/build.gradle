apply plugin: 'com.android.application'

final BUILD_DATE = new Date().format('yyyy.MM.dd-HH:mm')

def getVersionCodeTimeStamps = { ->
    def git = 'git log -1 --pretty=format:%ct'

    def proc = git.execute()
    proc.waitFor()
    def unixtime = "${proc.in.text}".trim()

    if (unixtime.isEmpty()) {
        println "Failed to get commit date"
        return -1
    }
    return Integer.parseInt(unixtime)
}

def metaFDroid(outputFileName) {
    new File(outputFileName, "version_fdroid.txt").text = [
            ["versionName", android.defaultConfig.versionName].join("="),
            ["versionCode", android.defaultConfig.versionCode].join("="),
    ].join("\n")
}

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "org.exarhteam.iitc_mobile"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode = getVersionCodeTimeStamps()
        versionName "0.40.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
        }
        release {
            if (System.getenv("CI")) {
                storeFile file("../keystore/android.jks")
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            } else {
                // We use keystore.properties file for signing data.
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))

                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-test-px-$BUILD_DATE"
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        beta {
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta-$BUILD_DATE"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    namespace 'org.exarhteam.iitc_mobile'
    lint {
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.resValue  "string", "application_id", variant.applicationId
        variant.getAssembleProvider().configure() {
            def outputDir = new File("${project.buildDir.absolutePath}/outputs/apk/${variant.flavorName}/${variant.buildType.name}")
           it.doLast {
                metaFDroid(outputDir)
            }
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.0-rc01'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.github.AppIntro:AppIntro:6.0.0'
    implementation 'com.akexorcist:localization:1.2.10'
    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.melnykov:floatingactionbutton:1.3.0'
    testImplementation 'junit:junit:4.13.2'
}

task copyUserscripts(type: Copy) {
    description = 'Updating prebuilt plugins'
    from 'C:\\Users\\jonas\\AndroidStudioProjects\\IITC_2\\assets'
    into 'src/main/assets'
    include('*')
    include('**/*')
}

preBuild.dependsOn copyUserscripts
